#!/usr/bin/env python3

import json
import getpass
import os
import requests

FINGERPRINT = "ercas-gistfuse"
AUTH_JSON = "/home/%s/.config/gistfuse-auth.json" % getpass.getuser()
ENDPOINT = "https://api.github.com"

def get_auth():

    if (os.path.isfile(AUTH_JSON)):
        with open(AUTH_JSON, "r") as f:
            return json.load(f)

    else:
        username = input("username: ")
        response = requests.post(
            "https://api.github.com/authorizations",
            auth = (
                username,
                getpass.getpass("password: ")
            ),
            json = {
                "scopes": [ "gist" ],
                "note": "gistfuse",
                "fingerprint": FINGERPRINT
            }
        )

        if (response.status_code == 201):
            auth = {
                "username": username,
                "token": response.json()["token"]
            }
            with open(AUTH_JSON, "w") as f:
                json.dump(auth, f, indent = 4)
            return auth
        elif (response.status_code == 401):
            raise Exception("Bad credentials")
        elif (response.status_code == 422):
            raise Exception("Please delete the \"gistfuse\" token from "
                            "https://github.com/settings/tokens and try again")

class GistAPI(object):

    def __init__(self):
        self.auth = get_auth()

    def get(self, url, params = {}):
        response = requests.get(
            url,
            params = params,
            auth = (self.auth["username"], self.auth["token"])
        )

        assert (response.status_code == 200)

        return response.json()

    def post(self, url, data):
        response = requests.post(
            url,
            json = data,
            auth = (self.auth["username"], self.auth["token"])
        )

        assert (response.status_code == 201)

        return response.json()

    def gists(self, user = None):
        if (user is None):
            user = self.auth["username"]
        return self.get("%s/users/%s/gists" % (ENDPOINT, user))

    def get_gist(self, gist_id):
        return self.get("%s/gists/%s" % (ENDPOINT, gist_id))

    def create_gist(self, files):
        data = {
            "description": "generated by gistfuse",
            "public": False,
            "files": {}
        }

        for file_ in files:
            with open(file_, "r") as f:
                data["files"][file_] = { "content": f.read() }

        return self.post("%s/gists" % ENDPOINT, data)

if (__name__ == "__main__"):
    print(json.dumps(
        GistAPI().create_gist(["api.py"]),
        indent = 4
    ))
